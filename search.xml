<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>title</title>
    <url>/2020/07/16/title/</url>
    <content><![CDATA[<p>#第一次搭建hexo，不容易。<br>#记录几个命令：hexo g；hexo d；hexo server；<br>#就这样吧，再见<br>#这只是一个测试。<br>#kk&amp;&amp;whj</p>
]]></content>
  </entry>
  <entry>
    <title>GTest单元测试</title>
    <url>/2020/08/12/GTest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>2020/6/23</p>
<h1 id="GTest单元测试"><a href="#GTest单元测试" class="headerlink" title="GTest单元测试"></a>GTest单元测试</h1><h2 id="1-gt-入门"><a href="#1-gt-入门" class="headerlink" title="1&gt;入门"></a>1&gt;入门</h2><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>开发过程中最低级别的测试环节，一般有编码人员自己完成；</p>
<ul>
<li>目的：隔离程序部件，并证明这些单个部件满足预期的功能。</li>
<li>在静态程序分析、代码检视之后，帮助在开发过程的早期发现问题。</li>
</ul>
<h4 id="好的测试具备以下特点："><a href="#好的测试具备以下特点：" class="headerlink" title="好的测试具备以下特点："></a>好的测试具备以下特点：</h4><ol>
<li>独立，即该测试用例不受其他测试的影响；</li>
<li>有效的组织架构，清晰的命名。对单个测试对象可能有多个测试用例对应该对象的多个功能；</li>
<li>可移植、可复用。不同的操作系统、编译器间进行方便地移植；</li>
<li>当用例失败时，提供尽可能多的有效信息。</li>
</ol>
<h4 id="单元测试的任务"><a href="#单元测试的任务" class="headerlink" title="单元测试的任务"></a>单元测试的任务</h4><ol>
<li>模块接口测试；</li>
<li>模块局部数据结构测试；</li>
<li>模块边界条件测试；</li>
<li>模块中所有独立执行通路测试；</li>
<li>模块各条错误处理通路测试；</li>
</ol>
<h4 id="何时写"><a href="#何时写" class="headerlink" title="何时写"></a>何时写</h4><ul>
<li>单元测试与具体实现代码同时进行。</li>
</ul>
<h4 id="写多细"><a href="#写多细" class="headerlink" title="写多细"></a>写多细</h4><p>哪些代码需要有单元测试覆盖：</p>
<ol>
<li>逻辑复杂的</li>
<li>容易出错的</li>
<li>不易理解的，即使是自己过段时间也会遗忘的，看不懂自己的代码，单元测试代码有助于理解代码的功能和需求</li>
<li>公共代码。比如自定义的所有http请求都会经过的拦截器；工具类等。</li>
<li>核心业务代码。一个产品里最核心最有业务价值的代码应该要有较高的单元测试覆盖率。</li>
</ol>
<h1 id="gmock"><a href="#gmock" class="headerlink" title="gmock"></a>gmock</h1><h2 id="1-初识-gmock"><a href="#1-初识-gmock" class="headerlink" title="1. 初识 gmock"></a>1. 初识 gmock</h2><ul>
<li><p>mock是便捷的模拟对象的方法；</p>
</li>
<li><p>特点：</p>
<ul>
<li>轻松地创建mock类</li>
<li>支持丰富的匹配器（Matcher）和行为（Action）</li>
<li>支持有序、无序、部分有序的期望行为的定义</li>
<li>多平台的支持</li>
</ul>
<p>当单元测试、模块的接口测试时，当这个模块需要依赖另外一个/几个类，而这时这些各类没有开发好，这时我们就可以定义了Mock对象来模拟那些类的行为。</p>
</li>
</ul>
<h2 id="Gtest-使用"><a href="#Gtest-使用" class="headerlink" title="Gtest 使用"></a>Gtest 使用</h2><h3 id="1-简单测试TEST"><a href="#1-简单测试TEST" class="headerlink" title="1. 简单测试TEST"></a>1. 简单测试TEST</h3><p>TEST(测试用例名，测试名)</p>
<ul>
<li>测试用例名，代表你要测试的函数；</li>
<li>测试名，代表函数中的某个测试对象；</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>linux下调试代码，做GTest单元测试</title>
    <url>/2020/08/12/linux%E4%B8%8B%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%81%9AGTest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>2020/6/23</p>
<h1 id="linux下调试代码，做GTest单元测试"><a href="#linux下调试代码，做GTest单元测试" class="headerlink" title="linux下调试代码，做GTest单元测试"></a>linux下调试代码，做GTest单元测试</h1><h2 id="1、linux常用命令"><a href="#1、linux常用命令" class="headerlink" title="1、linux常用命令"></a>1、linux常用命令</h2><p>cat —— 查看文件</p>
<h5 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h5><p>cd/home    ————    进入‘/home’目录</p>
<p>cd ..     ————    返回上一级目录</p>
<p>cd ../..    ————    返回上两级目录</p>
<p>cd -    ————    返回上次所在目录</p>
<p>pwd    ————    显示工作路径</p>
<p>ls    ————    查看目录中的文件</p>
<p>ls -F     ————    查看目录中的文件</p>
<p>ls -l    ————    显示文件和目录的详细资料</p>
<p>ls -a    ————    显示隐藏文件</p>
<p>ls *[0-9]*    ————    显示包含数字的文件名和目录名</p>
<p>tree    ————    显示文件和目录由根目录开始的树形结构(1)</p>
<p>lstree    ————    显示文件和目录由跟目录开始的树形结构(2)</p>
<p>mkdir dir1    ————    创建一个叫做‘dir1’的目录</p>
<p>mkdir dir1 dir2    ——    同时创建两个目录</p>
<p>mkdir -p/tmp/dir1/dir2    ——    创建一个目录树</p>
<h2 id="2、gdb调试命令"><a href="#2、gdb调试命令" class="headerlink" title="2、gdb调试命令"></a>2、gdb调试命令</h2><p>run/r —— 启动运行</p>
<p>file —— 指定调试程序文件</p>
<p>b + 文件名：行号/函数名 —— 断点</p>
<p>next —— 单步执行</p>
<p>c —— 程序继续执行</p>
<p>q —— 退出</p>
<p>step/s —— 进到函数</p>
<p>l —— 显示剩余待执行的代码</p>
<p>p + 变量名 —— 显示变量值</p>
<p>p + 函数名/数组名 —— 查看函数值/打印数组全部值</p>
<p>info b/reg/r —— 断点信息/程序信息</p>
<p>delete 数字编号/“ “ —— 删除指定断点/删除全部断点</p>
]]></content>
  </entry>
  <entry>
    <title>第一天</title>
    <url>/2020/07/16/%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<p>这是第一次搞博客，没有什么经验。就是想有一个记录自己的空间。今天学到了很多，感觉挺好的。</p>
]]></content>
  </entry>
  <entry>
    <title>虚函数</title>
    <url>/2020/08/12/%E8%99%9A%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="虚函数——纯虚函数"><a href="#虚函数——纯虚函数" class="headerlink" title="虚函数——纯虚函数"></a>虚函数——纯虚函数</h1><h4 id="C-虚函数"><a href="#C-虚函数" class="headerlink" title="C++虚函数"></a>C++虚函数</h4><p>定义一个函数为虚函数，不代表不被实现；</p>
<p>定义虚函数为了允许积累的指针来调用子类的这个函数；</p>
<p>第一纯虚函数是为了实现一个接口，起到一个规范作用，规范继承这个类的程序员必须实现这个函数</p>
<h4 id="C-纯虚函数"><a href="#C-纯虚函数" class="headerlink" title="C++纯虚函数"></a>C++纯虚函数</h4><p>纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求在任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加“=0”</p>
<p>virtual void function1() = 0;</p>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>同时含有纯虚函数的类称为抽象类；</p>
<p>用户不能创建抽象类的实例，只能创建它的派生类的实例。</p>
<p>纯虚函数最显著的特征是：它们必须在继承类中重新声明函数（不要后面的=0，否则该派生类也不能实例化），而且它们在抽象类中往往没有定义。</p>
<p>定义纯虚函数的意义，使派生类仅仅只是继承函数的接口；</p>
<p>纯虚函数的意义，让所有的类对象（主要是派生类对象）都可以执行纯虚函数的动作，</p>
<p>但类无法为纯虚函数提供一个合理的缺省实现。</p>
<p>所以类纯虚函数的声明就是在告诉类的设计者，“你必须提供一个纯虚函数的实现，但我不知道你会怎样实现它”</p>
<h5 id="抽象类的介绍"><a href="#抽象类的介绍" class="headerlink" title="抽象类的介绍"></a>抽象类的介绍</h5><p>抽象类是一种特殊的类，它是为了抽象和设计的目的建立的，它处于继承层次结构的较上层；</p>
<ul>
<li><p>抽象类的定义：称带有纯虚函数的类为抽象类；</p>
</li>
<li><p>作用：</p>
<ol>
<li>主要作用，将有关的操作作为结果接口组织在一个继承层次结构中，由它来为派生类提供一个公共的根，派生类将具体实现在其基类中作为接口操作。所以派生类实际上刻画了一组子类的操作接口的通用语义，这些语义也传给子类，子类可以具体实现这些语义，也可以再将这些语义传给自己的子类</li>
</ol>
</li>
<li><p>注意：</p>
<ul>
<li>抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类；</li>
<li>抽象类是不能定义对象的；</li>
</ul>
</li>
</ul>
<p>  总结：<br>  1、纯虚函数声明如下： virtual void funtion1()=0; 纯虚函数一定没有定义，纯虚函数用来规范派生类的行为，即接口。包含纯虚函数的类是抽象类，抽象类不能定义实例，但可以声明指向实现该抽象类的具体类的指针或引用。<br>  2、虚函数声明如下：virtual ReturnType FunctionName(Parameter)；虚函数必须实现，如果不实现，编译器将报错，错误提示为：<br>  error LNK****: unresolved external symbol “public: virtual void __thiscall ClassName::virtualFunctionName(void)”<br>  3、对于虚函数来说，父类和子类都有各自的版本。由多态方式调用的时候动态绑定。<br>  4、实现了纯虚函数的子类，该纯虚函数在子类中就编程了虚函数，子类的子类即孙子类可以覆盖该虚函数，由多态方式调用的时候动态绑定。<br>  5、虚函数是C++中用于实现多态(polymorphism)的机制。核心理念就是通过基类访问派生类定义的函数。<br>  6、在有动态分配堆上内存的时候，析构函数必须是虚函数，但没有必要是纯虚的。<br>  7、友元不是成员函数，只有成员函数才可以是虚拟的，因此友元不能是虚拟函数。但可以通过让友元函数调用虚拟成员函数来解决友元的虚拟问题。<br>  8、析构函数应当是虚函数，将调用相应对象类型的析构函数，因此，如果指针指向的是子类对象，将调用子类的析构函数，然后自动调用基类的析构函数。</p>
<p>  有纯虚函数的类是抽象类，不能生成对象，只能派生。他派生的类的纯虚函数没有被改写，那么，它的派生类还是个抽象类。<br>  定义纯虚函数就是为了让基类不可实例化化<br>  因为实例化这样的抽象数据结构本身并没有意义。<br>  或者给出实现也没有意义<br>  实际上我个人认为纯虚函数的引入，是出于两个目的<br>  1、为了安全，因为避免任何需要明确但是因为不小心而导致的未知的结果，提醒子类去做应做的实现。<br>  2、为了效率，不是程序执行的效率，而是为了编码的效率。</p>
]]></content>
  </entry>
</search>
